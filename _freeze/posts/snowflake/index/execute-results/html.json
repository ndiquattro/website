{
  "hash": "ae7b6c5be8e41b80d290dda21365871f",
  "result": {
    "markdown": "---\ntitle: Snowflake, R, and dbplyr\nauthor: Nick DiQuattro\ndate: '2020-02-03'\n---\n\n\nRecently we switched our data warehouse at work to [Snowflake](https://www.snowflake.com/) and have been pretty happy with the speed boost it provides. As an aside, we've been less happy with the insistence of ALL CAPS for column names. Anyway, I had already built an internal R package for our Postgres setup, so I ventured to make it work with Snowflake. In short, it took some doing and I wanted to share what I found worked best in case you find yourself in a similar situation.\n\n### The Rub\n\nSnowflake does offer a tutorial on [connecting R](https://github.com/snowflakedb/dplyr-snowflakedb) (including dplyr!) to their service, but it depends on rJava and RJODBC, which was overhead I wanted to avoid. Luckily, Snowflake also offers straight [ODBC drivers](https://docs.snowflake.net/manuals/user-guide/odbc.html) too!\n\nThe main challenge with using these drivers has been choosing between the two software packages that are available to maintain ODBC drivers: [unixodbc](http://www.unixodbc.org/) and [iODBC](http://www.iodbc.org/). Snowflake suggests using iODBC, but _may_ support unixODBC while R Studio suggests unixODBC, by _may_ support iODBC. After trying out both, I have found that the iODBC route is less painful. While I was able make everything work with unixODBC, it involved [editing config files by hand](http://colmanhumphrey.com/blog/2019/1/26/from-bug-to-bug). Which may be fine for you and I, but I have less technical folks at my company to worry about. \n\nHappily, the iODBC route works pretty smoothly, so that is what I will outline here. Note that it apparently causes trouble to have both installed, so you might want to remove unixODBC first if you already have it installed.\n\nFor reference, if entering `odbcinst -j` into your console works then you have unixODBC installed. If `iodbctest` works then you have iODBC installed.\n\n### iODBC\n\nMost of these steps can be done by visiting the relevant websites, downloading the package installers, double clicking, etc., but we'll outline how to do it from the command line here.\n\nFirst, we need to install iODBC\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbrew install libiodbc\n```\n:::\n\n\nNext, we download and install the latest [odbc drivers from Snowflake](https://docs.snowflake.net/manuals/user-guide/odbc-download.html). Note you may need to change the version number of the drivers to match what is in [`latest/`](https://sfc-repo.snowflakecomputing.com/odbc/mac64/latest/index.html).\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Download file to current working directory\ncurl -O https://sfc-repo.snowflakecomputing.com/odbc/mac64/latest/snowflake_odbc_mac-2.20.3.dmg\n\n# Run .pkg\nhdiutil attach snowflake_odbc_mac-2.20.3.dmg\nsudo installer -package /Volumes/snowflakeODBC/snowflakeODBC.pkg -target /\nhdiutil detach /Volumes/snowflakeODBC/\n```\n:::\n\n\n### Data Source Names\n\nWith the drivers installed, we can now store your Snowflake credentials as a Data Source Name (DSN) to make it easy to connect from R in your code.\n\nFirst, we tell iODBC where to look for your DSNs. Entering the following in your console adds a line to the bottom of your `.zshrc` that sets a persistent environment variable. If you are using bash, replace `.zshrc` with `.bashrc`.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho 'export ODBCINI=$HOME/.odbc.ini' >> .zshrc\n#echo 'export ODBCINI=$HOME/.odbc.ini' >> .bashrc\n```\n:::\n\n\nYou will need to restart your terminal for this to take effect. \n\n### Create or edit your DSN files.\nThere should now be a `.odbc.ini` and `.odbcinst.ini` in your home directory. If not, create them!\n\nYour `.odbcinst.ini` should look similar to this:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n[ODBC Drivers]\nSnowflake = Installed\n\n[Snowflake]\nDriver = /opt/snowflake/snowflakeodbc/lib/universal/libSnowflake.dylib\n\n```\n:::\n\n\nYour `.odbc.ini` should look like the following. Note that you can change the name in the `[]` (in the example it's `snowflake`) to whatever you want to use to call this connection in your code.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n[ODBC Data Sources]\nsnowflake = Snowflake\n\n[snowflake]\nDriver      = /opt/snowflake/snowflakeodbc/lib/universal/libSnowflake.dylib\nDescription = Typical user settings for Nick\nUID         = <your_username>\nPWD         = <your_password>\nServer      = <your_server>.snowflakecomputing.com\nRole        = <your_snowflake_role>\nDatabase    = <your_database>\nWarehouse   = <your_warehouse>\nSchema      = <your_default_schema>\nLocale      = en-US\nTracing     = 0\n\n```\n:::\n\n\n### odbc R Package\n\nThe last step is to install the [`odbc` R package ](https://github.com/r-dbi/odbc) *from source*. The install needs to be from source so that it can catch you are using iODBC and adjust.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"odbc\", type = \"source\")\n```\n:::\n\n\nAt this point you can restart your R session and run the following commands to make sure R sees your connection options.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbc::odbcListDrivers()\nodbc::odbcListDataSources()\n```\n:::\n\n\nFinally, we can connect and try out some queries.\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- DBI::dbConnect(odbc::odbc(), \"snowflake\")\n```\n:::\n\n\n### Future\nIn future posts I hope to share some custom dbplyr translations of lubridate / stringr functions I created to work with Snowflake's functions. Until then, I hope this helps!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}